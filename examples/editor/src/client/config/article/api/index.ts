// THIS FILE IS AUTOGENERATED, EDIT WITH CAUTION
import {Node} from 'slate'
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  DateTime: string;
  RichText: Node[];
  /** A hexidecimal color value. */
  Color: string;
  Unknown: any;
  ContentModelSchema: any;
  Slug: string;
  /** The `Upload` scalar type represents a file upload. */
  Upload: File;
};

export type _Cmp_Article = {
  __typename?: '_cmp_article';
  read: _Cmp_Article_Record;
  list: _Cmp_ArticleConnection;
};


export type _Cmp_ArticleReadArgs = {
  peerID?: Maybe<Scalars['ID']>;
  id: Scalars['ID'];
};


export type _Cmp_ArticleListArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<ArticleFilter>;
  sort?: Maybe<ArticleSort>;
  order?: Maybe<SortOrder>;
};

export type _Cmp_Article_Record = {
  __typename?: '_cmp_article_record';
  id: Scalars['ID'];
  contentType: Scalars['String'];
  revision: Scalars['Int'];
  state: ContentStateEnum;
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  publicationDate?: Maybe<Scalars['DateTime']>;
  dePublicationDate?: Maybe<Scalars['DateTime']>;
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmp_Article_Record_Content>;
};

export type _Cmp_Article_Record_Content = {
  __typename?: '_cmp_article_record_content';
  blocks?: Maybe<Array<Maybe<_Cmp_Article_Record_Content_Blocks>>>;
};

export type _Cmp_Article_Record_Content_Blocks = _Cmp_Article_Record_Content_Blocks_Title | _Cmp_Article_Record_Content_Blocks_RichText | _Cmp_Article_Record_Content_Blocks_Image | _Cmp_Article_Record_Content_Blocks_ImageGallery | _Cmp_Article_Record_Content_Blocks_Listicle | _Cmp_Article_Record_Content_Blocks_Vimeo | _Cmp_Article_Record_Content_Blocks_Youtube | _Cmp_Article_Record_Content_Blocks_SoundCloudTrack | _Cmp_Article_Record_Content_Blocks_Embed | _Cmp_Article_Record_Content_Blocks_LinkPageBreak | _Cmp_Article_Record_Content_Blocks_Quote | _Cmp_Article_Record_Content_Blocks_TeaserGrid;

export type _Cmp_Article_Record_Content_Blocks_Embed = {
  __typename?: '_cmp_article_record_content_blocks_embed';
  embed?: Maybe<_Cmp_Article_Record_Content_Blocks_Embed_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_Embed_Content = {
  __typename?: '_cmp_article_record_content_blocks_embed_content';
  url?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  styleCustom?: Maybe<Scalars['String']>;
};

export type _Cmp_Article_Record_Content_Blocks_Image = {
  __typename?: '_cmp_article_record_content_blocks_image';
  image?: Maybe<_Cmp_Article_Record_Content_Blocks_Image_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_Image_Content = {
  __typename?: '_cmp_article_record_content_blocks_image_content';
  image: Ref___Medialocal;
  caption?: Maybe<Scalars['String']>;
};

export type _Cmp_Article_Record_Content_Blocks_ImageGallery = {
  __typename?: '_cmp_article_record_content_blocks_imageGallery';
  imageGallery?: Maybe<_Cmp_Article_Record_Content_Blocks_ImageGallery_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_ImageGallery_Content = {
  __typename?: '_cmp_article_record_content_blocks_imageGallery_content';
  images: Array<Maybe<_Cmp_Article_Record_Content_Blocks_ImageGallery_Images>>;
};

export type _Cmp_Article_Record_Content_Blocks_ImageGallery_Images = {
  __typename?: '_cmp_article_record_content_blocks_imageGallery_images';
  image: Ref___Medialocal;
  caption?: Maybe<Scalars['String']>;
};

export type _Cmp_Article_Record_Content_Blocks_LinkPageBreak = {
  __typename?: '_cmp_article_record_content_blocks_linkPageBreak';
  linkPageBreak?: Maybe<_Cmp_Article_Record_Content_Blocks_LinkPageBreak_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_LinkPageBreak_Content = {
  __typename?: '_cmp_article_record_content_blocks_linkPageBreak_content';
  text?: Maybe<Scalars['String']>;
  richText: Scalars['RichText'];
  linkURL?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  linkTarget?: Maybe<Scalars['String']>;
  hideButton: Scalars['Boolean'];
  styleOption?: Maybe<Scalars['String']>;
  layoutOption?: Maybe<Scalars['String']>;
  templateOption?: Maybe<Scalars['String']>;
  image?: Maybe<Ref___Medialocal>;
};

export type _Cmp_Article_Record_Content_Blocks_Listicle = {
  __typename?: '_cmp_article_record_content_blocks_listicle';
  listicle?: Maybe<_Cmp_Article_Record_Content_Blocks_Listicle_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_Listicle_Content = {
  __typename?: '_cmp_article_record_content_blocks_listicle_content';
  items: Array<Maybe<_Cmp_Article_Record_Content_Blocks_Listicle_Items>>;
};

export type _Cmp_Article_Record_Content_Blocks_Listicle_Items = {
  __typename?: '_cmp_article_record_content_blocks_listicle_items';
  title?: Maybe<Scalars['String']>;
  richText?: Maybe<Scalars['RichText']>;
  image?: Maybe<Ref_Local>;
};

export type _Cmp_Article_Record_Content_Blocks_Quote = {
  __typename?: '_cmp_article_record_content_blocks_quote';
  quote?: Maybe<_Cmp_Article_Record_Content_Blocks_Quote_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_Quote_Content = {
  __typename?: '_cmp_article_record_content_blocks_quote_content';
  quote?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
};

export type _Cmp_Article_Record_Content_Blocks_RichText = {
  __typename?: '_cmp_article_record_content_blocks_richText';
  richText?: Maybe<_Cmp_Article_Record_Content_Blocks_RichText_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_RichText_Content = {
  __typename?: '_cmp_article_record_content_blocks_richText_content';
  richText: Scalars['RichText'];
};

export type _Cmp_Article_Record_Content_Blocks_SoundCloudTrack = {
  __typename?: '_cmp_article_record_content_blocks_soundCloudTrack';
  soundCloudTrack?: Maybe<_Cmp_Article_Record_Content_Blocks_SoundCloudTrack_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_SoundCloudTrack_Content = {
  __typename?: '_cmp_article_record_content_blocks_soundCloudTrack_content';
  trackID: Scalars['ID'];
};

export type _Cmp_Article_Record_Content_Blocks_TeaserGrid = {
  __typename?: '_cmp_article_record_content_blocks_teaserGrid';
  teaserGrid?: Maybe<_Cmp_Article_Record_Content_Blocks_TeaserGrid_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_TeaserGrid_Content = {
  __typename?: '_cmp_article_record_content_blocks_teaserGrid_content';
  teasers: Array<Maybe<_Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers>>;
  numColumns: Scalars['Int'];
};

export type _Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers = {
  __typename?: '_cmp_article_record_content_blocks_teaserGrid_teasers';
  style?: Maybe<_Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers_Style>;
  imageID?: Maybe<Ref___Medialocal>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  contentRef?: Maybe<Ref_Articleall_Pagelocal>;
};

export type _Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers_ContentRef = _Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers_ContentRef_Article | _Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers_ContentRef_Page;

export type _Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers_ContentRef_Article = {
  __typename?: '_cmp_article_record_content_blocks_teaserGrid_teasers_contentRef_article';
  article?: Maybe<_Cmp_Article_Record>;
};

export type _Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers_ContentRef_Page = {
  __typename?: '_cmp_article_record_content_blocks_teaserGrid_teasers_contentRef_page';
  page?: Maybe<Scalars['Unknown']>;
};

export enum _Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers_Style {
  /** default */
  Default = 'DEFAULT',
  /** light */
  Light = 'LIGHT',
  /** text */
  Text = 'TEXT'
}

export type _Cmp_Article_Record_Content_Blocks_Title = {
  __typename?: '_cmp_article_record_content_blocks_title';
  title?: Maybe<_Cmp_Article_Record_Content_Blocks_Title_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_Title_Content = {
  __typename?: '_cmp_article_record_content_blocks_title_content';
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
};

export type _Cmp_Article_Record_Content_Blocks_Vimeo = {
  __typename?: '_cmp_article_record_content_blocks_vimeo';
  vimeo?: Maybe<_Cmp_Article_Record_Content_Blocks_Vimeo_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_Vimeo_Content = {
  __typename?: '_cmp_article_record_content_blocks_vimeo_content';
  videoID: Scalars['ID'];
};

export type _Cmp_Article_Record_Content_Blocks_Youtube = {
  __typename?: '_cmp_article_record_content_blocks_youtube';
  youtube?: Maybe<_Cmp_Article_Record_Content_Blocks_Youtube_Content>;
};

export type _Cmp_Article_Record_Content_Blocks_Youtube_Content = {
  __typename?: '_cmp_article_record_content_blocks_youtube_content';
  videoID: Scalars['ID'];
};

export type _Cmp_ArticleConnection = {
  __typename?: '_cmp_articleConnection';
  nodes: Array<_Cmp_Article_Record>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type _Cmp_Example = {
  __typename?: '_cmp_example';
  read: _Cmp_Example_Record;
  list: _Cmp_ExampleConnection;
};


export type _Cmp_ExampleReadArgs = {
  peerID?: Maybe<Scalars['ID']>;
  id: Scalars['ID'];
};


export type _Cmp_ExampleListArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<ArticleFilter>;
  sort?: Maybe<ArticleSort>;
  order?: Maybe<SortOrder>;
};

export type _Cmp_Example_Record = {
  __typename?: '_cmp_example_record';
  id: Scalars['ID'];
  contentType: Scalars['String'];
  revision: Scalars['Int'];
  state: ContentStateEnum;
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  publicationDate?: Maybe<Scalars['DateTime']>;
  dePublicationDate?: Maybe<Scalars['DateTime']>;
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmp_Example_Record_Content>;
};

export type _Cmp_Example_Record_Content = {
  __typename?: '_cmp_example_record_content';
  myString?: Maybe<Scalars['String']>;
  myI18nString?: Maybe<I18n_String>;
  myRichText?: Maybe<Scalars['RichText']>;
  myI18nRichText?: Maybe<I18n_RichText>;
  myBoolean?: Maybe<Scalars['Boolean']>;
  myI18nBoolean?: Maybe<I18n_Boolean>;
  myInt?: Maybe<Scalars['Int']>;
  myI18nInt?: Maybe<I18n_Int>;
  myFloat?: Maybe<Scalars['Float']>;
  myI18nFloat?: Maybe<I18n_Float>;
  myDateTime?: Maybe<Scalars['DateTime']>;
  myI18nDateTime?: Maybe<I18n_DateTime>;
  myId?: Maybe<Scalars['ID']>;
  myI18nId?: Maybe<I18n_Id>;
  myEnum?: Maybe<_Cmp_Example_Record_Content_MyEnum>;
  myI18nEnum?: Maybe<_Cmp_Example_Record_Content_MyI18nEnum>;
  myList?: Maybe<Array<Maybe<Scalars['String']>>>;
  myObject?: Maybe<_Cmp_Example_Record_Content_MyObject>;
  myUnion?: Maybe<_Cmp_Example_Record_Content_MyUnion>;
  myReference?: Maybe<Ref_Examplelocal>;
};

export enum _Cmp_Example_Record_Content_MyEnum {
  /** Foo */
  Foo = 'foo',
  /** Bar */
  Bar = 'bar'
}

export enum _Cmp_Example_Record_Content_MyI18nEnum {
  /** Foo */
  Foo = 'foo',
  /** Bar */
  Bar = 'bar'
}

export type _Cmp_Example_Record_Content_MyObject = {
  __typename?: '_cmp_example_record_content_myObject';
  fieldA?: Maybe<Scalars['String']>;
  fieldB?: Maybe<Scalars['Int']>;
};

export type _Cmp_Example_Record_Content_MyUnion = _Cmp_Example_Record_Content_MyUnion_CaseA | _Cmp_Example_Record_Content_MyUnion_CaseB;

export type _Cmp_Example_Record_Content_MyUnion_CaseA = {
  __typename?: '_cmp_example_record_content_myUnion_caseA';
  caseA?: Maybe<_Cmp_Example_Record_Content_MyUnion_CaseA_Content>;
};

export type _Cmp_Example_Record_Content_MyUnion_CaseA_Content = {
  __typename?: '_cmp_example_record_content_myUnion_caseA_content';
  fieldA?: Maybe<Scalars['String']>;
  fieldB?: Maybe<Scalars['Int']>;
};

export type _Cmp_Example_Record_Content_MyUnion_CaseB = {
  __typename?: '_cmp_example_record_content_myUnion_caseB';
  caseB?: Maybe<_Cmp_Example_Record_Content_MyUnion_CaseB_Content>;
};

export type _Cmp_Example_Record_Content_MyUnion_CaseB_Content = {
  __typename?: '_cmp_example_record_content_myUnion_caseB_content';
  fieldA?: Maybe<Scalars['Int']>;
  fieldB?: Maybe<Scalars['String']>;
};

export type _Cmp_ExampleConnection = {
  __typename?: '_cmp_exampleConnection';
  nodes: Array<_Cmp_Example_Record>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type _Cmp_ModelA = {
  __typename?: '_cmp_modelA';
  read: _Cmp_ModelA_Record;
  list: _Cmp_ModelAConnection;
};


export type _Cmp_ModelAReadArgs = {
  peerID?: Maybe<Scalars['ID']>;
  id: Scalars['ID'];
};


export type _Cmp_ModelAListArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<ArticleFilter>;
  sort?: Maybe<ArticleSort>;
  order?: Maybe<SortOrder>;
};

export type _Cmp_ModelA_Record = {
  __typename?: '_cmp_modelA_record';
  id: Scalars['ID'];
  contentType: Scalars['String'];
  revision: Scalars['Int'];
  state: ContentStateEnum;
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  publicationDate?: Maybe<Scalars['DateTime']>;
  dePublicationDate?: Maybe<Scalars['DateTime']>;
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmp_ModelA_Record_Content>;
};

export type _Cmp_ModelA_Record_Content = {
  __typename?: '_cmp_modelA_record_content';
  myString?: Maybe<Scalars['String']>;
  myRichText?: Maybe<Scalars['RichText']>;
  myRef?: Maybe<Ref_ModelAlocal_ModelBlocal>;
};

export type _Cmp_ModelA_Record_Content_MyRef = _Cmp_ModelA_Record_Content_MyRef_ModelA | _Cmp_ModelA_Record_Content_MyRef_ModelB;

export type _Cmp_ModelA_Record_Content_MyRef_ModelA = {
  __typename?: '_cmp_modelA_record_content_myRef_modelA';
  modelA?: Maybe<_Cmp_ModelA_Record>;
};

export type _Cmp_ModelA_Record_Content_MyRef_ModelB = {
  __typename?: '_cmp_modelA_record_content_myRef_modelB';
  modelB?: Maybe<_Cmp_ModelB_Record>;
};

export type _Cmp_ModelAConnection = {
  __typename?: '_cmp_modelAConnection';
  nodes: Array<_Cmp_ModelA_Record>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type _Cmp_ModelB = {
  __typename?: '_cmp_modelB';
  read: _Cmp_ModelB_Record;
  list: _Cmp_ModelBConnection;
};


export type _Cmp_ModelBReadArgs = {
  peerID?: Maybe<Scalars['ID']>;
  id: Scalars['ID'];
};


export type _Cmp_ModelBListArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<ArticleFilter>;
  sort?: Maybe<ArticleSort>;
  order?: Maybe<SortOrder>;
};

export type _Cmp_ModelB_Record = {
  __typename?: '_cmp_modelB_record';
  id: Scalars['ID'];
  contentType: Scalars['String'];
  revision: Scalars['Int'];
  state: ContentStateEnum;
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  publicationDate?: Maybe<Scalars['DateTime']>;
  dePublicationDate?: Maybe<Scalars['DateTime']>;
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmp_ModelB_Record_Content>;
};

export type _Cmp_ModelB_Record_Content = {
  __typename?: '_cmp_modelB_record_content';
  myString?: Maybe<Scalars['String']>;
  myRichText?: Maybe<Scalars['RichText']>;
  myRef?: Maybe<Ref_ModelAlocal>;
};

export type _Cmp_ModelBConnection = {
  __typename?: '_cmp_modelBConnection';
  nodes: Array<_Cmp_ModelB_Record>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type _Cmpi_Article = {
  __typename?: '_cmpi_article';
  create: _Cmp_Article_Record;
  update: _Cmp_Article_Record;
  delete: Scalars['Boolean'];
  publish?: Maybe<_Cmp_Article_Record>;
  unpublish?: Maybe<_Cmp_Article_Record>;
};


export type _Cmpi_ArticleCreateArgs = {
  input: _Cmpi_Article_Record_Create;
};


export type _Cmpi_ArticleUpdateArgs = {
  input: _Cmpi_Article_Record_Update;
};


export type _Cmpi_ArticleDeleteArgs = {
  id: Scalars['ID'];
  revision?: Maybe<Scalars['Int']>;
};


export type _Cmpi_ArticlePublishArgs = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
};


export type _Cmpi_ArticleUnpublishArgs = {
  id: Scalars['ID'];
};

export type _Cmpi_Article_Record_Content = {
  blocks?: Maybe<Array<Maybe<_Cmpi_Article_Record_Content_Blocks>>>;
};

export type _Cmpi_Article_Record_Content_Blocks = {
  title?: Maybe<_Cmpi_Article_Record_Content_Blocks_Title>;
  richText?: Maybe<_Cmpi_Article_Record_Content_Blocks_RichText>;
  image?: Maybe<_Cmpi_Article_Record_Content_Blocks_Image>;
  imageGallery?: Maybe<_Cmpi_Article_Record_Content_Blocks_ImageGallery>;
  listicle?: Maybe<_Cmpi_Article_Record_Content_Blocks_Listicle>;
  vimeo?: Maybe<_Cmpi_Article_Record_Content_Blocks_Vimeo>;
  youtube?: Maybe<_Cmpi_Article_Record_Content_Blocks_Youtube>;
  soundCloudTrack?: Maybe<_Cmpi_Article_Record_Content_Blocks_SoundCloudTrack>;
  embed?: Maybe<_Cmpi_Article_Record_Content_Blocks_Embed>;
  linkPageBreak?: Maybe<_Cmpi_Article_Record_Content_Blocks_LinkPageBreak>;
  quote?: Maybe<_Cmpi_Article_Record_Content_Blocks_Quote>;
  teaserGrid?: Maybe<_Cmpi_Article_Record_Content_Blocks_TeaserGrid>;
};

export type _Cmpi_Article_Record_Content_Blocks_Embed = {
  url?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  styleCustom?: Maybe<Scalars['String']>;
};

export type _Cmpi_Article_Record_Content_Blocks_Image = {
  image: Ref_Input;
  caption?: Maybe<Scalars['String']>;
};

export type _Cmpi_Article_Record_Content_Blocks_ImageGallery = {
  images: Array<Maybe<_Cmpi_Article_Record_Content_Blocks_ImageGallery_Images>>;
};

export type _Cmpi_Article_Record_Content_Blocks_ImageGallery_Images = {
  image: Ref_Input;
  caption?: Maybe<Scalars['String']>;
};

export type _Cmpi_Article_Record_Content_Blocks_LinkPageBreak = {
  text?: Maybe<Scalars['String']>;
  richText: Scalars['RichText'];
  linkURL?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  linkTarget?: Maybe<Scalars['String']>;
  hideButton: Scalars['Boolean'];
  styleOption?: Maybe<Scalars['String']>;
  layoutOption?: Maybe<Scalars['String']>;
  templateOption?: Maybe<Scalars['String']>;
  image?: Maybe<Ref_Input>;
};

export type _Cmpi_Article_Record_Content_Blocks_Listicle = {
  items: Array<Maybe<_Cmpi_Article_Record_Content_Blocks_Listicle_Items>>;
};

export type _Cmpi_Article_Record_Content_Blocks_Listicle_Items = {
  title?: Maybe<Scalars['String']>;
  richText?: Maybe<Scalars['RichText']>;
  image?: Maybe<Ref_Input>;
};

export type _Cmpi_Article_Record_Content_Blocks_Quote = {
  quote?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
};

export type _Cmpi_Article_Record_Content_Blocks_RichText = {
  richText: Scalars['RichText'];
};

export type _Cmpi_Article_Record_Content_Blocks_SoundCloudTrack = {
  trackID: Scalars['ID'];
};

export type _Cmpi_Article_Record_Content_Blocks_TeaserGrid = {
  teasers: Array<Maybe<_Cmpi_Article_Record_Content_Blocks_TeaserGrid_Teasers>>;
  numColumns: Scalars['Int'];
};

export type _Cmpi_Article_Record_Content_Blocks_TeaserGrid_Teasers = {
  style?: Maybe<_Cmpi_Article_Record_Content_Blocks_TeaserGrid_Teasers_Style>;
  imageID?: Maybe<Ref_Input>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  contentRef?: Maybe<Ref_Input>;
};

export enum _Cmpi_Article_Record_Content_Blocks_TeaserGrid_Teasers_Style {
  /** default */
  Default = 'DEFAULT',
  /** light */
  Light = 'LIGHT',
  /** text */
  Text = 'TEXT'
}

export type _Cmpi_Article_Record_Content_Blocks_Title = {
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
};

export type _Cmpi_Article_Record_Content_Blocks_Vimeo = {
  videoID: Scalars['ID'];
};

export type _Cmpi_Article_Record_Content_Blocks_Youtube = {
  videoID: Scalars['ID'];
};

export type _Cmpi_Article_Record_Create = {
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmpi_Article_Record_Content>;
};

export type _Cmpi_Article_Record_Update = {
  id: Scalars['ID'];
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmpi_Article_Record_Content>;
};

export type _Cmpi_Example = {
  __typename?: '_cmpi_example';
  create: _Cmp_Example_Record;
  update: _Cmp_Example_Record;
  delete: Scalars['Boolean'];
  publish?: Maybe<_Cmp_Example_Record>;
  unpublish?: Maybe<_Cmp_Example_Record>;
};


export type _Cmpi_ExampleCreateArgs = {
  input: _Cmpi_Example_Record_Create;
};


export type _Cmpi_ExampleUpdateArgs = {
  input: _Cmpi_Example_Record_Update;
};


export type _Cmpi_ExampleDeleteArgs = {
  id: Scalars['ID'];
  revision?: Maybe<Scalars['Int']>;
};


export type _Cmpi_ExamplePublishArgs = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
};


export type _Cmpi_ExampleUnpublishArgs = {
  id: Scalars['ID'];
};

export type _Cmpi_Example_Record_Content = {
  myString?: Maybe<Scalars['String']>;
  myI18nString?: Maybe<I18n_String_Input>;
  myRichText?: Maybe<Scalars['RichText']>;
  myI18nRichText?: Maybe<I18n_RichText_Input>;
  myBoolean?: Maybe<Scalars['Boolean']>;
  myI18nBoolean?: Maybe<I18n_Boolean_Input>;
  myInt?: Maybe<Scalars['Int']>;
  myI18nInt?: Maybe<I18n_Int_Input>;
  myFloat?: Maybe<Scalars['Float']>;
  myI18nFloat?: Maybe<I18n_Float_Input>;
  myDateTime?: Maybe<Scalars['DateTime']>;
  myI18nDateTime?: Maybe<I18n_DateTime_Input>;
  myId?: Maybe<Scalars['ID']>;
  myI18nId?: Maybe<I18n_Id_Input>;
  myEnum?: Maybe<_Cmpi_Example_Record_Content_MyEnum>;
  myI18nEnum?: Maybe<_Cmpi_Example_Record_Content_MyI18nEnum>;
  myList?: Maybe<Array<Maybe<Scalars['String']>>>;
  myObject?: Maybe<_Cmpi_Example_Record_Content_MyObject>;
  myUnion?: Maybe<_Cmpi_Example_Record_Content_MyUnion>;
  myReference?: Maybe<Ref_Input>;
};

export enum _Cmpi_Example_Record_Content_MyEnum {
  /** Foo */
  Foo = 'foo',
  /** Bar */
  Bar = 'bar'
}

export enum _Cmpi_Example_Record_Content_MyI18nEnum {
  /** Foo */
  Foo = 'foo',
  /** Bar */
  Bar = 'bar'
}

export type _Cmpi_Example_Record_Content_MyObject = {
  fieldA?: Maybe<Scalars['String']>;
  fieldB?: Maybe<Scalars['Int']>;
};

export type _Cmpi_Example_Record_Content_MyUnion = {
  caseA?: Maybe<_Cmpi_Example_Record_Content_MyUnion_CaseA>;
  caseB?: Maybe<_Cmpi_Example_Record_Content_MyUnion_CaseB>;
};

export type _Cmpi_Example_Record_Content_MyUnion_CaseA = {
  fieldA?: Maybe<Scalars['String']>;
  fieldB?: Maybe<Scalars['Int']>;
};

export type _Cmpi_Example_Record_Content_MyUnion_CaseB = {
  fieldA?: Maybe<Scalars['Int']>;
  fieldB?: Maybe<Scalars['String']>;
};

export type _Cmpi_Example_Record_Create = {
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmpi_Example_Record_Content>;
};

export type _Cmpi_Example_Record_Update = {
  id: Scalars['ID'];
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmpi_Example_Record_Content>;
};

export type _Cmpi_ModelA = {
  __typename?: '_cmpi_modelA';
  create: _Cmp_ModelA_Record;
  update: _Cmp_ModelA_Record;
  delete: Scalars['Boolean'];
  publish?: Maybe<_Cmp_ModelA_Record>;
  unpublish?: Maybe<_Cmp_ModelA_Record>;
};


export type _Cmpi_ModelACreateArgs = {
  input: _Cmpi_ModelA_Record_Create;
};


export type _Cmpi_ModelAUpdateArgs = {
  input: _Cmpi_ModelA_Record_Update;
};


export type _Cmpi_ModelADeleteArgs = {
  id: Scalars['ID'];
  revision?: Maybe<Scalars['Int']>;
};


export type _Cmpi_ModelAPublishArgs = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
};


export type _Cmpi_ModelAUnpublishArgs = {
  id: Scalars['ID'];
};

export type _Cmpi_ModelA_Record_Content = {
  myString?: Maybe<Scalars['String']>;
  myRichText?: Maybe<Scalars['RichText']>;
  myRef?: Maybe<Ref_Input>;
};

export type _Cmpi_ModelA_Record_Create = {
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmpi_ModelA_Record_Content>;
};

export type _Cmpi_ModelA_Record_Update = {
  id: Scalars['ID'];
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmpi_ModelA_Record_Content>;
};

export type _Cmpi_ModelB = {
  __typename?: '_cmpi_modelB';
  create: _Cmp_ModelB_Record;
  update: _Cmp_ModelB_Record;
  delete: Scalars['Boolean'];
  publish?: Maybe<_Cmp_ModelB_Record>;
  unpublish?: Maybe<_Cmp_ModelB_Record>;
};


export type _Cmpi_ModelBCreateArgs = {
  input: _Cmpi_ModelB_Record_Create;
};


export type _Cmpi_ModelBUpdateArgs = {
  input: _Cmpi_ModelB_Record_Update;
};


export type _Cmpi_ModelBDeleteArgs = {
  id: Scalars['ID'];
  revision?: Maybe<Scalars['Int']>;
};


export type _Cmpi_ModelBPublishArgs = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
};


export type _Cmpi_ModelBUnpublishArgs = {
  id: Scalars['ID'];
};

export type _Cmpi_ModelB_Record_Content = {
  myString?: Maybe<Scalars['String']>;
  myRichText?: Maybe<Scalars['RichText']>;
  myRef?: Maybe<Ref_Input>;
};

export type _Cmpi_ModelB_Record_Create = {
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmpi_ModelB_Record_Content>;
};

export type _Cmpi_ModelB_Record_Update = {
  id: Scalars['ID'];
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  content?: Maybe<_Cmpi_ModelB_Record_Content>;
};

export type All = {
  __typename?: 'All';
  list: ListByTypeConnection;
};


export type AllListArgs = {
  type: ContentTypeEnum;
  context?: Maybe<ContentContextEnum>;
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<ArticleFilter>;
  sort?: Maybe<ArticleSort>;
  order?: Maybe<SortOrder>;
};

export type AllCustomContents = {
  __typename?: 'AllCustomContents';
  id: Scalars['ID'];
  shared: Scalars['Boolean'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  draft?: Maybe<AllCustomContentsRevision>;
  published?: Maybe<AllCustomContentsRevision>;
  pending?: Maybe<AllCustomContentsRevision>;
  latest: AllCustomContentsRevision;
};

export type AllCustomContentsRevision = {
  __typename?: 'AllCustomContentsRevision';
  revision: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
  title: Scalars['String'];
  slug: Scalars['Slug'];
};

export type AllMutations = {
  __typename?: 'AllMutations';
  delete?: Maybe<Scalars['Boolean']>;
  publish?: Maybe<AllCustomContents>;
  unpublish?: Maybe<AllCustomContents>;
};


export type AllMutationsDeleteArgs = {
  id: Scalars['ID'];
};


export type AllMutationsPublishArgs = {
  id: Scalars['ID'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
};


export type AllMutationsUnpublishArgs = {
  id: Scalars['ID'];
};

export type Article = {
  __typename?: 'Article';
  id: Scalars['ID'];
  shared: Scalars['Boolean'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  draft?: Maybe<ArticleRevision>;
  published?: Maybe<ArticleRevision>;
  pending?: Maybe<ArticleRevision>;
  latest: ArticleRevision;
};

export type ArticleConnection = {
  __typename?: 'ArticleConnection';
  nodes: Array<Article>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ArticleFilter = {
  title?: Maybe<Scalars['String']>;
  draft?: Maybe<Scalars['Boolean']>;
  published?: Maybe<Scalars['Boolean']>;
  pending?: Maybe<Scalars['Boolean']>;
  authors?: Maybe<Array<Scalars['ID']>>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type ArticleInput = {
  slug: Scalars['Slug'];
  preTitle?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  lead?: Maybe<Scalars['String']>;
  seoTitle?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  properties: Array<PropertiesInput>;
  imageID?: Maybe<Scalars['ID']>;
  authorIDs: Array<Scalars['ID']>;
  shared: Scalars['Boolean'];
  breaking: Scalars['Boolean'];
  hideAuthor: Scalars['Boolean'];
  socialMediaTitle?: Maybe<Scalars['String']>;
  socialMediaDescription?: Maybe<Scalars['String']>;
  socialMediaAuthorIDs: Array<Scalars['ID']>;
  socialMediaImageID?: Maybe<Scalars['ID']>;
  blocks: Array<BlockInput>;
};

export type ArticleNavigationLink = BaseNavigationLink & {
  __typename?: 'ArticleNavigationLink';
  label: Scalars['String'];
  article?: Maybe<Article>;
};

export type ArticleNavigationLinkInput = {
  label: Scalars['String'];
  articleID: Scalars['ID'];
};

export type ArticleRevision = {
  __typename?: 'ArticleRevision';
  revision: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
  hideAuthor: Scalars['Boolean'];
  preTitle?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  lead?: Maybe<Scalars['String']>;
  seoTitle?: Maybe<Scalars['String']>;
  slug: Scalars['Slug'];
  tags: Array<Scalars['String']>;
  properties: Array<Properties>;
  image?: Maybe<Image>;
  authors: Array<Maybe<Author>>;
  breaking: Scalars['Boolean'];
  socialMediaTitle?: Maybe<Scalars['String']>;
  socialMediaDescription?: Maybe<Scalars['String']>;
  socialMediaAuthors: Array<Author>;
  socialMediaImage?: Maybe<Image>;
  blocks: Array<Block>;
};

export enum ArticleSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT',
  PublishAt = 'PUBLISH_AT',
  PublishedAt = 'PUBLISHED_AT',
  UpdatedAt = 'UPDATED_AT'
}

export type ArticleTeaser = {
  __typename?: 'ArticleTeaser';
  style: TeaserStyle;
  image?: Maybe<Image>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  article?: Maybe<Article>;
};

export type ArticleTeaserInput = {
  style: TeaserStyle;
  imageID?: Maybe<Scalars['ID']>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  articleID: Scalars['ID'];
};

export type Author = {
  __typename?: 'Author';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  slug: Scalars['Slug'];
  url: Scalars['String'];
  links?: Maybe<Array<AuthorLink>>;
  bio?: Maybe<Scalars['RichText']>;
  jobTitle?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
};

export type AuthorConnection = {
  __typename?: 'AuthorConnection';
  nodes: Array<Author>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type AuthorFilter = {
  name?: Maybe<Scalars['String']>;
};

export type AuthorInput = {
  name: Scalars['String'];
  slug: Scalars['Slug'];
  links?: Maybe<Array<AuthorLinkInput>>;
  bio?: Maybe<Scalars['RichText']>;
  jobTitle?: Maybe<Scalars['String']>;
  imageID?: Maybe<Scalars['ID']>;
};

export type AuthorLink = {
  __typename?: 'AuthorLink';
  title: Scalars['String'];
  url: Scalars['String'];
};

export type AuthorLinkInput = {
  title: Scalars['String'];
  url: Scalars['String'];
};

export enum AuthorSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export type AuthProvider = {
  __typename?: 'AuthProvider';
  name: Scalars['String'];
  url: Scalars['String'];
};

export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod';
  paymentMethods: Array<PaymentMethod>;
  paymentPeriodicities: Array<PaymentPeriodicity>;
  forceAutoRenewal: Scalars['Boolean'];
};

export type AvailablePaymentMethodInput = {
  paymentMethodIDs: Array<Scalars['String']>;
  paymentPeriodicities: Array<PaymentPeriodicity>;
  forceAutoRenewal: Scalars['Boolean'];
};

export type BaseNavigationLink = {
  label: Scalars['String'];
};

export type Block = RichTextBlock | ImageBlock | ImageGalleryBlock | ListicleBlock | FacebookPostBlock | FacebookVideoBlock | InstagramPostBlock | TwitterTweetBlock | VimeoVideoBlock | YouTubeVideoBlock | SoundCloudTrackBlock | EmbedBlock | LinkPageBreakBlock | TitleBlock | QuoteBlock | TeaserGridBlock;

export type BlockInput = {
  richText?: Maybe<RichTextBlockInput>;
  image?: Maybe<ImageBlockInput>;
  imageGallery?: Maybe<ImageGalleryBlockInput>;
  listicle?: Maybe<ListicleBlockInput>;
  title?: Maybe<TitleBlockInput>;
  quote?: Maybe<QuoteBlockInput>;
  facebookPost?: Maybe<FacebookPostBlockInput>;
  facebookVideo?: Maybe<FacebookVideoBlockInput>;
  instagramPost?: Maybe<InstagramPostBlockInput>;
  twitterTweet?: Maybe<TwitterTweetBlockInput>;
  vimeoVideo?: Maybe<VimeoVideoBlockInput>;
  youTubeVideo?: Maybe<YouTubeVideoBlockInput>;
  soundCloudTrack?: Maybe<SoundCloudTrackBlockInput>;
  embed?: Maybe<EmbedBlockInput>;
  linkPageBreak?: Maybe<LinkPageBreakBlockInput>;
  teaserGrid?: Maybe<TeaserGridBlockInput>;
};


export type Comment = {
  __typename?: 'Comment';
  id: Scalars['ID'];
  user: User;
  authorType: CommentAuthorType;
  itemID: Scalars['ID'];
  itemType: CommentItemType;
  parentID?: Maybe<Scalars['ID']>;
  revisions: Array<CommentRevision>;
  state: CommentState;
  rejectionReason?: Maybe<CommentRejectionReason>;
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
};

export enum CommentAuthorType {
  Author = 'Author',
  Team = 'Team',
  VerifiedUser = 'VerifiedUser'
}

export type CommentConnection = {
  __typename?: 'CommentConnection';
  nodes: Array<Comment>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type CommentFilter = {
  state?: Maybe<CommentState>;
};

export enum CommentItemType {
  Article = 'Article',
  Page = 'Page'
}

export enum CommentRejectionReason {
  Misconduct = 'Misconduct',
  Spam = 'Spam'
}

export type CommentRevision = {
  __typename?: 'CommentRevision';
  text: Scalars['RichText'];
  createdAt: Scalars['DateTime'];
};

export enum CommentSort {
  ModifiedAt = 'ModifiedAt',
  CreatedAt = 'CreatedAt'
}

export enum CommentState {
  Approved = 'Approved',
  PendingApproval = 'PendingApproval',
  PendingUserChanges = 'PendingUserChanges',
  Rejected = 'Rejected'
}

export enum ContentContextEnum {
  Local = 'local',
  Peers = 'peers'
}

export type ContentModelConfig = {
  __typename?: 'ContentModelConfig';
  id: Scalars['ID'];
  identifier: Scalars['String'];
  namePlural: Scalars['String'];
  nameSingular: Scalars['String'];
  schema: Scalars['ContentModelSchema'];
};


export type ContentModelSummary = {
  __typename?: 'ContentModelSummary';
  id: Scalars['ID'];
  title: Scalars['String'];
  shared: Scalars['Boolean'];
  contentType: ContentTypeEnum;
  revision: Scalars['Int'];
  state: ContentStateEnum;
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  publicationDate?: Maybe<Scalars['DateTime']>;
  dePublicationDate?: Maybe<Scalars['DateTime']>;
};

export enum ContentStateEnum {
  Draft = 'Draft',
  Review = 'Review',
  Release = 'Release',
  Archive = 'Archive'
}

export enum ContentTypeEnum {
  Example = 'example',
  ModelA = 'modelA',
  ModelB = 'modelB',
  Article = 'article'
}

export type CreatedToken = {
  __typename?: 'CreatedToken';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  token: Scalars['String'];
};

export type CreatePeerInput = {
  name: Scalars['String'];
  slug: Scalars['String'];
  hostURL: Scalars['String'];
  token: Scalars['String'];
};

export type CustomContent = {
  __typename?: 'CustomContent';
  example: _Cmp_Example;
  modelA: _Cmp_ModelA;
  modelB: _Cmp_ModelB;
  article: _Cmp_Article;
  _all: All;
  _schema: Array<ContentModelConfig>;
};

export type CustomContentMutations = {
  __typename?: 'CustomContentMutations';
  example: _Cmpi_Example;
  modelA: _Cmpi_ModelA;
  modelB: _Cmpi_ModelB;
  article: _Cmpi_Article;
  _all: AllMutations;
};

export type DateFilter = {
  date?: Maybe<Scalars['DateTime']>;
  comparison: DateFilterComparison;
};

export enum DateFilterComparison {
  Greater = 'GREATER',
  GreaterOrEqual = 'GREATER_OR_EQUAL',
  Equal = 'EQUAL',
  Lower = 'LOWER',
  LowerOrEqual = 'LOWER_OR_EQUAL'
}


export type EmbedBlock = {
  __typename?: 'EmbedBlock';
  url?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  styleCustom?: Maybe<Scalars['String']>;
};

export type EmbedBlockInput = {
  url?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  styleCustom?: Maybe<Scalars['String']>;
};

export type ExternalNavigationLink = BaseNavigationLink & {
  __typename?: 'ExternalNavigationLink';
  label: Scalars['String'];
  url: Scalars['String'];
};

export type ExternalNavigationLinkInput = {
  label: Scalars['String'];
  url: Scalars['String'];
};

export type FacebookPostBlock = {
  __typename?: 'FacebookPostBlock';
  userID: Scalars['String'];
  postID: Scalars['String'];
};

export type FacebookPostBlockInput = {
  userID: Scalars['String'];
  postID: Scalars['String'];
};

export type FacebookVideoBlock = {
  __typename?: 'FacebookVideoBlock';
  userID: Scalars['String'];
  videoID: Scalars['String'];
};

export type FacebookVideoBlockInput = {
  userID: Scalars['String'];
  videoID: Scalars['String'];
};

export type GalleryImageEdge = {
  __typename?: 'GalleryImageEdge';
  caption?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
};

export type GalleryImageEdgeInput = {
  caption?: Maybe<Scalars['String']>;
  imageID?: Maybe<Scalars['ID']>;
};

export type I18n_Boolean = {
  __typename?: 'i18n_Boolean';
  en?: Maybe<Scalars['Boolean']>;
  de?: Maybe<Scalars['Boolean']>;
};

export type I18n_Boolean_Input = {
  en?: Maybe<Scalars['Boolean']>;
  de?: Maybe<Scalars['Boolean']>;
};

export type I18n_DateTime = {
  __typename?: 'i18n_DateTime';
  en?: Maybe<Scalars['DateTime']>;
  de?: Maybe<Scalars['DateTime']>;
};

export type I18n_DateTime_Input = {
  en?: Maybe<Scalars['DateTime']>;
  de?: Maybe<Scalars['DateTime']>;
};

export type I18n_Float = {
  __typename?: 'i18n_Float';
  en?: Maybe<Scalars['Float']>;
  de?: Maybe<Scalars['Float']>;
};

export type I18n_Float_Input = {
  en?: Maybe<Scalars['Float']>;
  de?: Maybe<Scalars['Float']>;
};

export type I18n_Id = {
  __typename?: 'i18n_ID';
  en?: Maybe<Scalars['ID']>;
  de?: Maybe<Scalars['ID']>;
};

export type I18n_Id_Input = {
  en?: Maybe<Scalars['ID']>;
  de?: Maybe<Scalars['ID']>;
};

export type I18n_Int = {
  __typename?: 'i18n_Int';
  en?: Maybe<Scalars['Int']>;
  de?: Maybe<Scalars['Int']>;
};

export type I18n_Int_Input = {
  en?: Maybe<Scalars['Int']>;
  de?: Maybe<Scalars['Int']>;
};

export type I18n_RichText = {
  __typename?: 'i18n_RichText';
  en?: Maybe<Scalars['RichText']>;
  de?: Maybe<Scalars['RichText']>;
};

export type I18n_RichText_Input = {
  en?: Maybe<Scalars['RichText']>;
  de?: Maybe<Scalars['RichText']>;
};

export type I18n_String = {
  __typename?: 'i18n_String';
  en?: Maybe<Scalars['String']>;
  de?: Maybe<Scalars['String']>;
};

export type I18n_String_Input = {
  en?: Maybe<Scalars['String']>;
  de?: Maybe<Scalars['String']>;
};

export type Image = {
  __typename?: 'Image';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  filename?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  license?: Maybe<Scalars['String']>;
  fileSize: Scalars['Int'];
  extension: Scalars['String'];
  mimeType: Scalars['String'];
  format: Scalars['String'];
  width: Scalars['Int'];
  height: Scalars['Int'];
  focalPoint?: Maybe<Point>;
  url?: Maybe<Scalars['String']>;
  transformURL?: Maybe<Scalars['String']>;
};


export type ImageTransformUrlArgs = {
  input?: Maybe<ImageTransformation>;
};

export type ImageBlock = {
  __typename?: 'ImageBlock';
  image?: Maybe<Image>;
  caption?: Maybe<Scalars['String']>;
};

export type ImageBlockInput = {
  caption?: Maybe<Scalars['String']>;
  imageID?: Maybe<Scalars['ID']>;
};

export type ImageConnection = {
  __typename?: 'ImageConnection';
  nodes: Array<Image>;
  totalCount: Scalars['Int'];
  pageInfo: PageInfo;
};

export type ImageFilter = {
  title?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type ImageGalleryBlock = {
  __typename?: 'ImageGalleryBlock';
  images: Array<GalleryImageEdge>;
};

export type ImageGalleryBlockInput = {
  images?: Maybe<Array<Maybe<GalleryImageEdgeInput>>>;
};

export enum ImageOutput {
  Png = 'PNG',
  Jpeg = 'JPEG',
  Webp = 'WEBP'
}

export enum ImageRotation {
  Auto = 'AUTO',
  Rotate_0 = 'ROTATE_0',
  Rotate_90 = 'ROTATE_90',
  Rotate_180 = 'ROTATE_180',
  Rotate_270 = 'ROTATE_270'
}

export enum ImageSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export type ImageTransformation = {
  width?: Maybe<Scalars['Int']>;
  height?: Maybe<Scalars['Int']>;
  rotation?: Maybe<ImageRotation>;
  quality?: Maybe<Scalars['Float']>;
  output?: Maybe<ImageOutput>;
};

export type InputPoint = {
  x: Scalars['Float'];
  y: Scalars['Float'];
};

export type InstagramPostBlock = {
  __typename?: 'InstagramPostBlock';
  postID: Scalars['String'];
};

export type InstagramPostBlockInput = {
  postID: Scalars['String'];
};

export type Invoice = {
  __typename?: 'Invoice';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  mail: Scalars['String'];
  user?: Maybe<User>;
  description?: Maybe<Scalars['String']>;
  paidAt?: Maybe<Scalars['DateTime']>;
  items: Array<InvoiceItem>;
  total: Scalars['Int'];
};

export type InvoiceConnection = {
  __typename?: 'InvoiceConnection';
  nodes: Array<Invoice>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvoiceFilter = {
  mail?: Maybe<Scalars['String']>;
};

export type InvoiceInput = {
  mail: Scalars['String'];
  userID?: Maybe<Scalars['ID']>;
  description?: Maybe<Scalars['String']>;
  paidAt?: Maybe<Scalars['DateTime']>;
  items: Array<InvoiceItemInput>;
};

export type InvoiceItem = {
  __typename?: 'InvoiceItem';
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  quantity: Scalars['Int'];
  amount: Scalars['Int'];
  total: Scalars['Int'];
};

export type InvoiceItemInput = {
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  quantity: Scalars['Int'];
  amount: Scalars['Int'];
};

export enum InvoiceSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT',
  PaidAt = 'PAID_AT'
}

export type LinkPageBreakBlock = {
  __typename?: 'LinkPageBreakBlock';
  text?: Maybe<Scalars['String']>;
  richText: Scalars['RichText'];
  linkURL?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  linkTarget?: Maybe<Scalars['String']>;
  hideButton: Scalars['Boolean'];
  styleOption?: Maybe<Scalars['String']>;
  layoutOption?: Maybe<Scalars['String']>;
  templateOption?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
};

export type LinkPageBreakBlockInput = {
  text?: Maybe<Scalars['String']>;
  richText: Scalars['RichText'];
  linkURL?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  linkTarget?: Maybe<Scalars['String']>;
  hideButton: Scalars['Boolean'];
  styleOption?: Maybe<Scalars['String']>;
  templateOption?: Maybe<Scalars['String']>;
  layoutOption?: Maybe<Scalars['String']>;
  imageID?: Maybe<Scalars['ID']>;
};

export type ListByTypeConnection = {
  __typename?: 'listByTypeConnection';
  nodes: Array<ListByTypePeerCustomContent>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ListByTypePeerCustomContent = {
  __typename?: 'listByTypePeerCustomContent';
  peer?: Maybe<Peer>;
  content: ContentModelSummary;
};

export type ListicleBlock = {
  __typename?: 'ListicleBlock';
  items: Array<ListicleItem>;
};

export type ListicleBlockInput = {
  items?: Maybe<Array<Maybe<ListicleItemInput>>>;
};

export type ListicleItem = {
  __typename?: 'ListicleItem';
  title: Scalars['String'];
  image?: Maybe<Image>;
  richText: Scalars['RichText'];
};

export type ListicleItemInput = {
  title: Scalars['String'];
  imageID?: Maybe<Scalars['ID']>;
  richText: Scalars['RichText'];
};

export type MemberPlan = {
  __typename?: 'MemberPlan';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  slug: Scalars['String'];
  image?: Maybe<Image>;
  description?: Maybe<Scalars['RichText']>;
  active: Scalars['Boolean'];
  amountPerMonthMin: Scalars['Int'];
  availablePaymentMethods: Array<AvailablePaymentMethod>;
};

export type MemberPlanConnection = {
  __typename?: 'MemberPlanConnection';
  nodes: Array<MemberPlan>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type MemberPlanFilter = {
  name?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
};

export type MemberPlanInput = {
  name: Scalars['String'];
  slug: Scalars['String'];
  imageID?: Maybe<Scalars['ID']>;
  description?: Maybe<Scalars['RichText']>;
  active: Scalars['Boolean'];
  amountPerMonthMin: Scalars['Int'];
  availablePaymentMethods: Array<AvailablePaymentMethodInput>;
};

export enum MemberPlanSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export type Mutation = {
  __typename?: 'Mutation';
  content: CustomContentMutations;
  updatePeerProfile: PeerProfile;
  createPeer: Peer;
  updatePeer: Peer;
  deletePeer?: Maybe<Scalars['ID']>;
  createSession: SessionWithToken;
  createSessionWithJWT: SessionWithToken;
  createSessionWithOAuth2Code: SessionWithToken;
  revokeSession: Scalars['Boolean'];
  revokeActiveSession: Scalars['Boolean'];
  sessions: Array<Session>;
  sendJWTLogin: Scalars['String'];
  createToken: CreatedToken;
  deleteToken?: Maybe<Scalars['String']>;
  createUser?: Maybe<User>;
  updateUser?: Maybe<User>;
  updateUserSubscription?: Maybe<UserSubscription>;
  resetUserPassword?: Maybe<User>;
  deleteUser?: Maybe<Scalars['String']>;
  deleteUserSubscription?: Maybe<Scalars['String']>;
  createUserRole?: Maybe<UserRole>;
  updateUserRole?: Maybe<UserRole>;
  deleteUserRole?: Maybe<Scalars['String']>;
  createNavigation?: Maybe<Navigation>;
  updateNavigation?: Maybe<Navigation>;
  deleteNavigation?: Maybe<Scalars['ID']>;
  createAuthor?: Maybe<Author>;
  updateAuthor?: Maybe<Author>;
  deleteAuthor?: Maybe<Scalars['ID']>;
  uploadImage?: Maybe<Image>;
  updateImage?: Maybe<Image>;
  deleteImage?: Maybe<Scalars['Boolean']>;
  createArticle: Article;
  updateArticle?: Maybe<Article>;
  deleteArticle?: Maybe<Scalars['Boolean']>;
  publishArticle?: Maybe<Article>;
  unpublishArticle?: Maybe<Article>;
  duplicateArticle: Article;
  createPage: Page;
  updatePage?: Maybe<Page>;
  deletePage?: Maybe<Scalars['Boolean']>;
  publishPage?: Maybe<Page>;
  unpublishPage?: Maybe<Page>;
  duplicatePage: Page;
  createMemberPlan?: Maybe<MemberPlan>;
  updateMemberPlan?: Maybe<MemberPlan>;
  deleteMemberPlan?: Maybe<Scalars['ID']>;
  createPaymentMethod?: Maybe<PaymentMethod>;
  updatePaymentMethod?: Maybe<PaymentMethod>;
  deletePaymentMethod?: Maybe<Scalars['ID']>;
  createInvoice?: Maybe<Invoice>;
  createPaymentFromInvoice?: Maybe<Payment>;
  updateInvoice?: Maybe<Invoice>;
  deleteInvoice?: Maybe<Scalars['ID']>;
  approveComment: Comment;
  rejectComment: Comment;
  requestChangesOnComment: Comment;
};


export type MutationUpdatePeerProfileArgs = {
  input: PeerProfileInput;
};


export type MutationCreatePeerArgs = {
  input: CreatePeerInput;
};


export type MutationUpdatePeerArgs = {
  id: Scalars['ID'];
  input: UpdatePeerInput;
};


export type MutationDeletePeerArgs = {
  id: Scalars['ID'];
};


export type MutationCreateSessionArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationCreateSessionWithJwtArgs = {
  jwt: Scalars['String'];
};


export type MutationCreateSessionWithOAuth2CodeArgs = {
  name: Scalars['String'];
  code: Scalars['String'];
  redirectUri: Scalars['String'];
};


export type MutationRevokeSessionArgs = {
  id: Scalars['ID'];
};


export type MutationSendJwtLoginArgs = {
  url: Scalars['String'];
  email: Scalars['String'];
};


export type MutationCreateTokenArgs = {
  input: TokenInput;
};


export type MutationDeleteTokenArgs = {
  id: Scalars['ID'];
};


export type MutationCreateUserArgs = {
  input: UserInput;
  password: Scalars['String'];
};


export type MutationUpdateUserArgs = {
  id: Scalars['ID'];
  input: UserInput;
};


export type MutationUpdateUserSubscriptionArgs = {
  userID: Scalars['ID'];
  input: UserSubscriptionInput;
};


export type MutationResetUserPasswordArgs = {
  id: Scalars['ID'];
  password: Scalars['String'];
  sendMail?: Maybe<Scalars['Boolean']>;
};


export type MutationDeleteUserArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserSubscriptionArgs = {
  userID: Scalars['ID'];
};


export type MutationCreateUserRoleArgs = {
  input: UserRoleInput;
};


export type MutationUpdateUserRoleArgs = {
  id: Scalars['ID'];
  input: UserRoleInput;
};


export type MutationDeleteUserRoleArgs = {
  id: Scalars['ID'];
};


export type MutationCreateNavigationArgs = {
  input: NavigationInput;
};


export type MutationUpdateNavigationArgs = {
  id: Scalars['ID'];
  input: NavigationInput;
};


export type MutationDeleteNavigationArgs = {
  id: Scalars['ID'];
};


export type MutationCreateAuthorArgs = {
  input: AuthorInput;
};


export type MutationUpdateAuthorArgs = {
  id: Scalars['ID'];
  input: AuthorInput;
};


export type MutationDeleteAuthorArgs = {
  id: Scalars['ID'];
};


export type MutationUploadImageArgs = {
  input: UploadImageInput;
};


export type MutationUpdateImageArgs = {
  id: Scalars['ID'];
  input: UpdateImageInput;
};


export type MutationDeleteImageArgs = {
  id: Scalars['ID'];
};


export type MutationCreateArticleArgs = {
  input: ArticleInput;
};


export type MutationUpdateArticleArgs = {
  id: Scalars['ID'];
  input: ArticleInput;
};


export type MutationDeleteArticleArgs = {
  id: Scalars['ID'];
};


export type MutationPublishArticleArgs = {
  id: Scalars['ID'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
};


export type MutationUnpublishArticleArgs = {
  id: Scalars['ID'];
};


export type MutationDuplicateArticleArgs = {
  id: Scalars['ID'];
};


export type MutationCreatePageArgs = {
  input: PageInput;
};


export type MutationUpdatePageArgs = {
  id: Scalars['ID'];
  input: PageInput;
};


export type MutationDeletePageArgs = {
  id: Scalars['ID'];
};


export type MutationPublishPageArgs = {
  id: Scalars['ID'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
};


export type MutationUnpublishPageArgs = {
  id: Scalars['ID'];
};


export type MutationDuplicatePageArgs = {
  id: Scalars['ID'];
};


export type MutationCreateMemberPlanArgs = {
  input: MemberPlanInput;
};


export type MutationUpdateMemberPlanArgs = {
  id: Scalars['ID'];
  input: MemberPlanInput;
};


export type MutationDeleteMemberPlanArgs = {
  id: Scalars['ID'];
};


export type MutationCreatePaymentMethodArgs = {
  input: PaymentMethodInput;
};


export type MutationUpdatePaymentMethodArgs = {
  id: Scalars['ID'];
  input: PaymentMethodInput;
};


export type MutationDeletePaymentMethodArgs = {
  id: Scalars['ID'];
};


export type MutationCreateInvoiceArgs = {
  input: InvoiceInput;
};


export type MutationCreatePaymentFromInvoiceArgs = {
  input: PaymentFromInvoiceInput;
};


export type MutationUpdateInvoiceArgs = {
  id: Scalars['ID'];
  input: InvoiceInput;
};


export type MutationDeleteInvoiceArgs = {
  id: Scalars['ID'];
};


export type MutationApproveCommentArgs = {
  id: Scalars['ID'];
};


export type MutationRejectCommentArgs = {
  id: Scalars['ID'];
  rejectionReason: CommentRejectionReason;
};


export type MutationRequestChangesOnCommentArgs = {
  id: Scalars['ID'];
  rejectionReason: CommentRejectionReason;
};

export type Navigation = {
  __typename?: 'Navigation';
  id: Scalars['ID'];
  key: Scalars['String'];
  name: Scalars['String'];
  links: Array<NavigationLink>;
};

export type NavigationInput = {
  key: Scalars['String'];
  name: Scalars['String'];
  links: Array<NavigationLinkInput>;
};

export type NavigationLink = PageNavigationLink | ArticleNavigationLink | ExternalNavigationLink;

export type NavigationLinkInput = {
  page?: Maybe<PageNavigationLinkInput>;
  article?: Maybe<ArticleNavigationLinkInput>;
  external?: Maybe<ExternalNavigationLinkInput>;
};

export type Page = {
  __typename?: 'Page';
  id: Scalars['ID'];
  shared: Scalars['Boolean'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  draft?: Maybe<PageRevision>;
  published?: Maybe<PageRevision>;
  pending?: Maybe<PageRevision>;
  latest: PageRevision;
};

export type PageConnection = {
  __typename?: 'PageConnection';
  nodes: Array<Page>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PageFilter = {
  title?: Maybe<Scalars['String']>;
  draft?: Maybe<Scalars['Boolean']>;
  published?: Maybe<Scalars['Boolean']>;
  pending?: Maybe<Scalars['Boolean']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  startCursor?: Maybe<Scalars['String']>;
  endCursor?: Maybe<Scalars['String']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
};

export type PageInput = {
  slug: Scalars['Slug'];
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  properties: Array<PropertiesInput>;
  imageID?: Maybe<Scalars['ID']>;
  socialMediaTitle?: Maybe<Scalars['String']>;
  socialMediaDescription?: Maybe<Scalars['String']>;
  socialMediaImageID?: Maybe<Scalars['ID']>;
  blocks: Array<BlockInput>;
};

export type PageNavigationLink = BaseNavigationLink & {
  __typename?: 'PageNavigationLink';
  label: Scalars['String'];
  page?: Maybe<Page>;
};

export type PageNavigationLinkInput = {
  label: Scalars['String'];
  pageID: Scalars['ID'];
};

export type PageRevision = {
  __typename?: 'PageRevision';
  revision: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  publishAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  publishedAt?: Maybe<Scalars['DateTime']>;
  slug: Scalars['Slug'];
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  properties: Array<Properties>;
  image?: Maybe<Image>;
  socialMediaTitle?: Maybe<Scalars['String']>;
  socialMediaDescription?: Maybe<Scalars['String']>;
  socialMediaImage?: Maybe<Image>;
  blocks: Array<Block>;
};

export enum PageSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT',
  PublishAt = 'PUBLISH_AT',
  PublishedAt = 'PUBLISHED_AT',
  UpdatedAt = 'UPDATED_AT'
}

export type PageTeaser = {
  __typename?: 'PageTeaser';
  style: TeaserStyle;
  image?: Maybe<Image>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  page?: Maybe<Page>;
};

export type PageTeaserInput = {
  style: TeaserStyle;
  imageID?: Maybe<Scalars['ID']>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  pageID: Scalars['ID'];
};

export type Payment = {
  __typename?: 'Payment';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  intentID?: Maybe<Scalars['String']>;
  intentSecret?: Maybe<Scalars['String']>;
  state: PaymentState;
  invoice: Invoice;
  intentData?: Maybe<Scalars['String']>;
  paymentMethod: PaymentMethod;
  paymentData?: Maybe<Scalars['String']>;
};

export type PaymentConnection = {
  __typename?: 'PaymentConnection';
  nodes: Array<Payment>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PaymentFilter = {
  intentID?: Maybe<Scalars['String']>;
};

export type PaymentFromInvoiceInput = {
  invoiceID: Scalars['String'];
  paymentMethodID: Scalars['String'];
  successURL?: Maybe<Scalars['String']>;
  failureURL?: Maybe<Scalars['String']>;
};

export type PaymentMethod = {
  __typename?: 'PaymentMethod';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description: Scalars['String'];
  paymentProvider: PaymentProvider;
  active: Scalars['Boolean'];
};

export type PaymentMethodInput = {
  name: Scalars['String'];
  description: Scalars['String'];
  paymentProviderID: Scalars['String'];
  active: Scalars['Boolean'];
};

export enum PaymentPeriodicity {
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
  Biannual = 'BIANNUAL',
  Yearly = 'YEARLY'
}

export type PaymentProvider = {
  __typename?: 'PaymentProvider';
  id: Scalars['ID'];
  name: Scalars['String'];
};

export enum PaymentSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export enum PaymentState {
  Created = 'Created',
  Submitted = 'Submitted',
  RequiresUserAction = 'RequiresUserAction',
  Processing = 'Processing',
  Payed = 'Payed',
  Canceled = 'Canceled',
  Declined = 'Declined'
}

export type Peer = {
  __typename?: 'Peer';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  slug: Scalars['String'];
  hostURL: Scalars['String'];
  profile?: Maybe<PeerProfile>;
};

export type PeerArticle = {
  __typename?: 'PeerArticle';
  peer: Peer;
  article: Article;
};

export type PeerArticleConnection = {
  __typename?: 'PeerArticleConnection';
  nodes: Array<PeerArticle>;
  pageInfo: UnidirectionalPageInfo;
  totalCount: Scalars['Int'];
};

export type PeerArticleTeaser = {
  __typename?: 'PeerArticleTeaser';
  style: TeaserStyle;
  image?: Maybe<Image>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  peer?: Maybe<Peer>;
  articleID: Scalars['ID'];
  article?: Maybe<Article>;
};

export type PeerArticleTeaserInput = {
  style: TeaserStyle;
  imageID?: Maybe<Scalars['ID']>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  peerID: Scalars['ID'];
  articleID: Scalars['ID'];
};

export type PeerProfile = {
  __typename?: 'PeerProfile';
  name: Scalars['String'];
  logo?: Maybe<Image>;
  themeColor: Scalars['Color'];
  hostURL: Scalars['String'];
  websiteURL: Scalars['String'];
  callToActionText: Scalars['RichText'];
  callToActionURL: Scalars['String'];
};

export type PeerProfileInput = {
  name: Scalars['String'];
  logoID?: Maybe<Scalars['ID']>;
  themeColor: Scalars['Color'];
  callToActionText: Scalars['RichText'];
  callToActionURL: Scalars['String'];
};

export type Permission = {
  __typename?: 'Permission';
  id: Scalars['String'];
  description: Scalars['String'];
  deprecated: Scalars['Boolean'];
};

export type Point = {
  __typename?: 'Point';
  x: Scalars['Float'];
  y: Scalars['Float'];
};

export type Properties = {
  __typename?: 'Properties';
  key: Scalars['String'];
  value: Scalars['String'];
  public: Scalars['Boolean'];
};

export type PropertiesInput = {
  key: Scalars['String'];
  value: Scalars['String'];
  public: Scalars['Boolean'];
};

export type Query = {
  __typename?: 'Query';
  content: CustomContent;
  peerProfile: PeerProfile;
  peers?: Maybe<Array<Peer>>;
  peer?: Maybe<Peer>;
  me?: Maybe<User>;
  sessions: Array<Session>;
  authProviders: Array<AuthProvider>;
  user?: Maybe<User>;
  users: UserConnection;
  userRole?: Maybe<UserRole>;
  userRoles: UserRoleConnection;
  permissions?: Maybe<Array<Permission>>;
  tokens: Array<Token>;
  navigation?: Maybe<Navigation>;
  navigations: Array<Navigation>;
  author?: Maybe<Author>;
  authors: AuthorConnection;
  image?: Maybe<Image>;
  images: ImageConnection;
  comments: CommentConnection;
  article?: Maybe<Article>;
  articles: ArticleConnection;
  peerArticle?: Maybe<Article>;
  peerArticles: PeerArticleConnection;
  articlePreviewLink?: Maybe<Scalars['String']>;
  page?: Maybe<Page>;
  pages: PageConnection;
  memberPlan?: Maybe<MemberPlan>;
  memberPlans: MemberPlanConnection;
  paymentMethod?: Maybe<PaymentMethod>;
  paymentMethods: Array<PaymentMethod>;
  paymentProviders: Array<PaymentProvider>;
  invoice?: Maybe<Invoice>;
  invoices: InvoiceConnection;
  payment?: Maybe<Payment>;
  payments: PaymentConnection;
};


export type QueryPeerArgs = {
  id: Scalars['ID'];
};


export type QueryAuthProvidersArgs = {
  redirectUri?: Maybe<Scalars['String']>;
};


export type QueryUserArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryUsersArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  filter?: Maybe<UserFilter>;
  sort?: Maybe<UserSort>;
  order?: Maybe<SortOrder>;
};


export type QueryUserRoleArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryUserRolesArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<UserRoleFilter>;
  sort?: Maybe<UserRoleSort>;
  order?: Maybe<SortOrder>;
};


export type QueryNavigationArgs = {
  id?: Maybe<Scalars['ID']>;
  key?: Maybe<Scalars['ID']>;
};


export type QueryAuthorArgs = {
  id?: Maybe<Scalars['ID']>;
  slug?: Maybe<Scalars['Slug']>;
};


export type QueryAuthorsArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<AuthorFilter>;
  sort?: Maybe<AuthorSort>;
  order?: Maybe<SortOrder>;
};


export type QueryImageArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryImagesArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<ImageFilter>;
  sort?: Maybe<ImageSort>;
  order?: Maybe<SortOrder>;
};


export type QueryCommentsArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  filter?: Maybe<CommentFilter>;
  sort?: Maybe<CommentSort>;
  order?: Maybe<SortOrder>;
};


export type QueryArticleArgs = {
  id: Scalars['ID'];
};


export type QueryArticlesArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  filter?: Maybe<ArticleFilter>;
  sort?: Maybe<ArticleSort>;
  order?: Maybe<SortOrder>;
};


export type QueryPeerArticleArgs = {
  peerID: Scalars['ID'];
  id: Scalars['ID'];
};


export type QueryPeerArticlesArgs = {
  after?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  filter?: Maybe<ArticleFilter>;
  sort?: Maybe<ArticleSort>;
  order?: Maybe<SortOrder>;
};


export type QueryArticlePreviewLinkArgs = {
  id: Scalars['ID'];
  hours: Scalars['Int'];
};


export type QueryPageArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryPagesArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<PageFilter>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<PageSort>;
  order?: Maybe<SortOrder>;
};


export type QueryMemberPlanArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryMemberPlansArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<MemberPlanFilter>;
  sort?: Maybe<MemberPlanSort>;
  order?: Maybe<SortOrder>;
};


export type QueryPaymentMethodArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryInvoiceArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryInvoicesArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<InvoiceFilter>;
  sort?: Maybe<InvoiceSort>;
  order?: Maybe<SortOrder>;
};


export type QueryPaymentArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryPaymentsArgs = {
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  filter?: Maybe<PaymentFilter>;
  sort?: Maybe<PaymentSort>;
  order?: Maybe<SortOrder>;
};

export type QuoteBlock = {
  __typename?: 'QuoteBlock';
  quote?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
};

export type QuoteBlockInput = {
  quote?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
};

export type Ref___Medialocal = {
  __typename?: 'ref___medialocal';
  recordId: Scalars['ID'];
  contentType: Scalars['ID'];
  peerId?: Maybe<Scalars['ID']>;
  record?: Maybe<Image>;
  peer?: Maybe<Peer>;
};

export type Ref_Articleall_Pagelocal = {
  __typename?: 'ref_articleall_pagelocal';
  recordId: Scalars['ID'];
  contentType: Scalars['ID'];
  peerId?: Maybe<Scalars['ID']>;
  record?: Maybe<_Cmp_Article_Record_Content_Blocks_TeaserGrid_Teasers_ContentRef>;
  peer?: Maybe<Peer>;
};

export type Ref_Examplelocal = {
  __typename?: 'ref_examplelocal';
  recordId: Scalars['ID'];
  contentType: Scalars['ID'];
  peerId?: Maybe<Scalars['ID']>;
  record?: Maybe<_Cmp_Example_Record>;
  peer?: Maybe<Peer>;
};

export type Ref_Input = {
  recordId: Scalars['ID'];
  contentType: Scalars['ID'];
  peerId?: Maybe<Scalars['ID']>;
  record?: Maybe<Scalars['Unknown']>;
  peer?: Maybe<Scalars['Unknown']>;
};

export type Ref_Local = {
  __typename?: 'ref_local';
  recordId: Scalars['ID'];
  contentType: Scalars['ID'];
  peerId?: Maybe<Scalars['ID']>;
  record?: Maybe<Scalars['Unknown']>;
  peer?: Maybe<Peer>;
};

export type Ref_ModelAlocal = {
  __typename?: 'ref_modelAlocal';
  recordId: Scalars['ID'];
  contentType: Scalars['ID'];
  peerId?: Maybe<Scalars['ID']>;
  record?: Maybe<_Cmp_ModelA_Record>;
  peer?: Maybe<Peer>;
};

export type Ref_ModelAlocal_ModelBlocal = {
  __typename?: 'ref_modelAlocal_modelBlocal';
  recordId: Scalars['ID'];
  contentType: Scalars['ID'];
  peerId?: Maybe<Scalars['ID']>;
  record?: Maybe<_Cmp_ModelA_Record_Content_MyRef>;
  peer?: Maybe<Peer>;
};


export type RichTextBlock = {
  __typename?: 'RichTextBlock';
  richText: Scalars['RichText'];
};

export type RichTextBlockInput = {
  richText: Scalars['RichText'];
};

export type Session = {
  __typename?: 'Session';
  id: Scalars['ID'];
  user: User;
  createdAt: Scalars['DateTime'];
  expiresAt: Scalars['DateTime'];
};

export type SessionWithToken = {
  __typename?: 'SessionWithToken';
  id: Scalars['ID'];
  user: User;
  token: Scalars['String'];
  createdAt: Scalars['DateTime'];
  expiresAt: Scalars['DateTime'];
};


export enum SortOrder {
  Ascending = 'ASCENDING',
  Descending = 'DESCENDING'
}

export type SoundCloudTrackBlock = {
  __typename?: 'SoundCloudTrackBlock';
  trackID: Scalars['String'];
};

export type SoundCloudTrackBlockInput = {
  trackID: Scalars['String'];
};

export type Teaser = ArticleTeaser | PeerArticleTeaser | PageTeaser;

export type TeaserGridBlock = {
  __typename?: 'TeaserGridBlock';
  teasers: Array<Maybe<Teaser>>;
  numColumns: Scalars['Int'];
};

export type TeaserGridBlockInput = {
  teasers: Array<Maybe<TeaserInput>>;
  numColumns: Scalars['Int'];
};

export type TeaserInput = {
  article?: Maybe<ArticleTeaserInput>;
  peerArticle?: Maybe<PeerArticleTeaserInput>;
  page?: Maybe<PageTeaserInput>;
};

export enum TeaserStyle {
  Default = 'DEFAULT',
  Light = 'LIGHT',
  Text = 'TEXT'
}

export type TitleBlock = {
  __typename?: 'TitleBlock';
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
};

export type TitleBlockInput = {
  title?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
};

export type Token = {
  __typename?: 'Token';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
};

export type TokenInput = {
  name: Scalars['String'];
};

export type TwitterTweetBlock = {
  __typename?: 'TwitterTweetBlock';
  userID: Scalars['String'];
  tweetID: Scalars['String'];
};

export type TwitterTweetBlockInput = {
  userID: Scalars['String'];
  tweetID: Scalars['String'];
};

export type UnidirectionalPageInfo = {
  __typename?: 'UnidirectionalPageInfo';
  endCursor?: Maybe<Scalars['String']>;
  hasNextPage: Scalars['Boolean'];
};


export type UpdateImageInput = {
  filename?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
  source?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  license?: Maybe<Scalars['String']>;
  focalPoint?: Maybe<InputPoint>;
};

export type UpdatePeerInput = {
  name: Scalars['String'];
  slug: Scalars['String'];
  hostURL: Scalars['String'];
  token?: Maybe<Scalars['String']>;
};


export type UploadImageInput = {
  file: Scalars['Upload'];
  filename?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
  source?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  license?: Maybe<Scalars['String']>;
  focalPoint?: Maybe<InputPoint>;
};

export type User = {
  __typename?: 'User';
  id: Scalars['String'];
  createdAt: Scalars['DateTime'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  email: Scalars['String'];
  preferredName?: Maybe<Scalars['String']>;
  address?: Maybe<UserAddress>;
  active: Scalars['Boolean'];
  lastLogin?: Maybe<Scalars['DateTime']>;
  properties: Array<Properties>;
  roles: Array<UserRole>;
  subscription?: Maybe<UserSubscription>;
};

export type UserAddress = {
  __typename?: 'UserAddress';
  company?: Maybe<Scalars['String']>;
  streetAddress: Scalars['String'];
  streetAddress2?: Maybe<Scalars['String']>;
  zipCode: Scalars['String'];
  city: Scalars['String'];
  country: Scalars['String'];
};

export type UserAddressInput = {
  company?: Maybe<Scalars['String']>;
  streetAddress: Scalars['String'];
  streetAddress2?: Maybe<Scalars['String']>;
  zipCode: Scalars['String'];
  city: Scalars['String'];
  country: Scalars['String'];
};

export type UserConnection = {
  __typename?: 'UserConnection';
  nodes: Array<User>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type UserFilter = {
  name?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  subscription?: Maybe<UserSubscriptionFilter>;
};

export type UserInput = {
  name: Scalars['String'];
  email: Scalars['String'];
  preferredName?: Maybe<Scalars['String']>;
  address?: Maybe<UserAddressInput>;
  active: Scalars['Boolean'];
  properties: Array<PropertiesInput>;
  roleIDs?: Maybe<Array<Scalars['String']>>;
};

export type UserRole = {
  __typename?: 'UserRole';
  id: Scalars['String'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  systemRole: Scalars['Boolean'];
  permissions: Array<Permission>;
};

export type UserRoleConnection = {
  __typename?: 'UserRoleConnection';
  nodes: Array<UserRole>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type UserRoleFilter = {
  name?: Maybe<Scalars['String']>;
};

export type UserRoleInput = {
  name: Scalars['String'];
  description: Scalars['String'];
  permissionIDs?: Maybe<Array<Scalars['String']>>;
};

export enum UserRoleSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export enum UserSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT',
  Name = 'NAME'
}

export type UserSubscription = {
  __typename?: 'UserSubscription';
  memberPlan: MemberPlan;
  paymentPeriodicity: PaymentPeriodicity;
  monthlyAmount: Scalars['Int'];
  autoRenew: Scalars['Boolean'];
  startsAt: Scalars['DateTime'];
  paidUntil?: Maybe<Scalars['DateTime']>;
  paymentMethod: PaymentMethod;
  deactivatedAt?: Maybe<Scalars['DateTime']>;
};

export type UserSubscriptionFilter = {
  startsAt?: Maybe<DateFilter>;
  paidUntil?: Maybe<DateFilter>;
  deactivatedAt?: Maybe<DateFilter>;
  autoRenew?: Maybe<Scalars['Boolean']>;
};

export type UserSubscriptionInput = {
  memberPlanID: Scalars['String'];
  paymentPeriodicity: PaymentPeriodicity;
  monthlyAmount: Scalars['Int'];
  autoRenew: Scalars['Boolean'];
  startsAt: Scalars['DateTime'];
  paidUntil?: Maybe<Scalars['DateTime']>;
  paymentMethodID: Scalars['String'];
  deactivatedAt?: Maybe<Scalars['DateTime']>;
};

export type VimeoVideoBlock = {
  __typename?: 'VimeoVideoBlock';
  videoID: Scalars['String'];
};

export type VimeoVideoBlockInput = {
  videoID: Scalars['String'];
};

export type YouTubeVideoBlock = {
  __typename?: 'YouTubeVideoBlock';
  videoID: Scalars['String'];
};

export type YouTubeVideoBlockInput = {
  videoID: Scalars['String'];
};

export type ContentListQueryVariables = Exact<{
  type: ContentTypeEnum;
  context?: Maybe<ContentContextEnum>;
  filter?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
}>;


export type ContentListQuery = (
  { __typename?: 'Query' }
  & { content: (
    { __typename?: 'CustomContent' }
    & { _all: (
      { __typename?: 'All' }
      & { list: (
        { __typename?: 'listByTypeConnection' }
        & Pick<ListByTypeConnection, 'totalCount'>
        & { nodes: Array<(
          { __typename?: 'listByTypePeerCustomContent' }
          & { peer?: Maybe<(
            { __typename?: 'Peer' }
            & Pick<Peer, 'id' | 'name'>
          )>, content: (
            { __typename?: 'ContentModelSummary' }
            & ContentListRefFragment
          ) }
        )>, pageInfo: (
          { __typename?: 'PageInfo' }
          & Pick<PageInfo, 'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'>
        ) }
      ) }
    ) }
  ) }
);

export type ContentListRefFragment = (
  { __typename?: 'ContentModelSummary' }
  & Pick<ContentModelSummary, 'id' | 'title' | 'shared' | 'contentType' | 'revision' | 'state' | 'createdAt' | 'modifiedAt' | 'publicationDate' | 'dePublicationDate'>
);

export type PublishContentMutationVariables = Exact<{
  id: Scalars['ID'];
  publishAt: Scalars['DateTime'];
  publishedAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
}>;


export type PublishContentMutation = (
  { __typename?: 'Mutation' }
  & { content: (
    { __typename?: 'CustomContentMutations' }
    & { _all: (
      { __typename?: 'AllMutations' }
      & { publish?: Maybe<(
        { __typename?: 'AllCustomContents' }
        & Pick<AllCustomContents, 'id'>
        & { pending?: Maybe<(
          { __typename?: 'AllCustomContentsRevision' }
          & Pick<AllCustomContentsRevision, 'publishAt'>
        )>, published?: Maybe<(
          { __typename?: 'AllCustomContentsRevision' }
          & Pick<AllCustomContentsRevision, 'publishedAt'>
        )> }
      )> }
    ) }
  ) }
);

export type UnpublishContentMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type UnpublishContentMutation = (
  { __typename?: 'Mutation' }
  & { content: (
    { __typename?: 'CustomContentMutations' }
    & { _all: (
      { __typename?: 'AllMutations' }
      & { unpublish?: Maybe<(
        { __typename?: 'AllCustomContents' }
        & Pick<AllCustomContents, 'id'>
        & { pending?: Maybe<(
          { __typename?: 'AllCustomContentsRevision' }
          & Pick<AllCustomContentsRevision, 'publishAt'>
        )>, published?: Maybe<(
          { __typename?: 'AllCustomContentsRevision' }
          & Pick<AllCustomContentsRevision, 'publishedAt'>
        )> }
      )> }
    ) }
  ) }
);

export type DeleteContentMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteContentMutation = (
  { __typename?: 'Mutation' }
  & { content: (
    { __typename?: 'CustomContentMutations' }
    & { _all: (
      { __typename?: 'AllMutations' }
      & Pick<AllMutations, 'delete'>
    ) }
  ) }
);

export type ModelAQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ModelAQuery = (
  { __typename?: 'Query' }
  & { content: (
    { __typename?: 'CustomContent' }
    & { modelA: (
      { __typename?: '_cmp_modelA' }
      & { read: (
        { __typename?: '_cmp_modelA_record' }
        & Pick<_Cmp_ModelA_Record, 'id' | 'contentType' | 'title'>
        & { content?: Maybe<(
          { __typename?: '_cmp_modelA_record_content' }
          & Pick<_Cmp_ModelA_Record_Content, 'myString' | 'myRichText'>
        )> }
      ) }
    ) }
  ) }
);

export type ContentModelSchemaQueryVariables = Exact<{ [key: string]: never; }>;


export type ContentModelSchemaQuery = (
  { __typename?: 'Query' }
  & { content: (
    { __typename?: 'CustomContent' }
    & { _schema: Array<(
      { __typename?: 'ContentModelConfig' }
      & Pick<ContentModelConfig, 'id' | 'identifier' | 'nameSingular' | 'namePlural' | 'schema'>
    )> }
  ) }
);

export type ImageUrLsFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'url'>
  & { largeURL: Image['transformURL'], mediumURL: Image['transformURL'], thumbURL: Image['transformURL'], squareURL: Image['transformURL'], previewURL: Image['transformURL'], column1URL: Image['transformURL'], column6URL: Image['transformURL'] }
);

export type ImageRefFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'id' | 'filename' | 'extension' | 'title' | 'description' | 'width' | 'height'>
  & ImageUrLsFragment
);

export type FullImageFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'id' | 'createdAt' | 'modifiedAt' | 'filename' | 'extension' | 'width' | 'height' | 'fileSize' | 'description' | 'tags' | 'author' | 'source' | 'license'>
  & { focalPoint?: Maybe<(
    { __typename?: 'Point' }
    & Pick<Point, 'x' | 'y'>
  )> }
  & ImageRefFragment
);

export type ImageListQueryVariables = Exact<{
  filter?: Maybe<Scalars['String']>;
  after?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['ID']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
}>;


export type ImageListQuery = (
  { __typename?: 'Query' }
  & { images: (
    { __typename?: 'ImageConnection' }
    & { nodes: Array<(
      { __typename?: 'Image' }
      & ImageRefFragment
    )>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'>
    ) }
  ) }
);

export type ImageQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ImageQuery = (
  { __typename?: 'Query' }
  & { image?: Maybe<(
    { __typename?: 'Image' }
    & FullImageFragment
  )> }
);

export type UploadImageMutationVariables = Exact<{
  input: UploadImageInput;
}>;


export type UploadImageMutation = (
  { __typename?: 'Mutation' }
  & { uploadImage?: Maybe<(
    { __typename?: 'Image' }
    & ImageRefFragment
  )> }
);

export type UpdateImageMutationVariables = Exact<{
  id: Scalars['ID'];
  input: UpdateImageInput;
}>;


export type UpdateImageMutation = (
  { __typename?: 'Mutation' }
  & { updateImage?: Maybe<(
    { __typename?: 'Image' }
    & FullImageFragment
  )> }
);

export type DeleteImageMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteImageMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteImage'>
);

export const ContentListRefFragmentDoc = gql`
    fragment ContentListRef on ContentModelSummary {
  id
  title
  shared
  contentType
  revision
  state
  createdAt
  modifiedAt
  publicationDate
  dePublicationDate
}
    `;
export const ImageUrLsFragmentDoc = gql`
    fragment ImageURLs on Image {
  url
  largeURL: transformURL(input: {width: 500})
  mediumURL: transformURL(input: {width: 300})
  thumbURL: transformURL(input: {width: 280, height: 200})
  squareURL: transformURL(input: {width: 100, height: 100})
  previewURL: transformURL(input: {width: 400, height: 200})
  column1URL: transformURL(input: {width: 800, height: 300})
  column6URL: transformURL(input: {width: 260, height: 300})
}
    `;
export const ImageRefFragmentDoc = gql`
    fragment ImageRef on Image {
  id
  filename
  extension
  title
  description
  width
  height
  ...ImageURLs
}
    ${ImageUrLsFragmentDoc}`;
export const FullImageFragmentDoc = gql`
    fragment FullImage on Image {
  id
  createdAt
  modifiedAt
  filename
  extension
  width
  height
  fileSize
  description
  tags
  author
  source
  license
  focalPoint {
    x
    y
  }
  ...ImageRef
}
    ${ImageRefFragmentDoc}`;
export const ContentListDocument = gql`
    query ContentList($type: contentTypeEnum!, $context: contentContextEnum, $filter: String, $after: ID, $first: Int) {
  content {
    _all {
      list(type: $type, context: $context, first: $first, after: $after, filter: {title: $filter}) {
        nodes {
          peer {
            id
            name
          }
          content {
            ...ContentListRef
          }
        }
        pageInfo {
          startCursor
          endCursor
          hasNextPage
          hasPreviousPage
        }
        totalCount
      }
    }
  }
}
    ${ContentListRefFragmentDoc}`;

/**
 * __useContentListQuery__
 *
 * To run a query within a React component, call `useContentListQuery` and pass it any options that fit your needs.
 * When your component renders, `useContentListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useContentListQuery({
 *   variables: {
 *      type: // value for 'type'
 *      context: // value for 'context'
 *      filter: // value for 'filter'
 *      after: // value for 'after'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useContentListQuery(baseOptions?: Apollo.QueryHookOptions<ContentListQuery, ContentListQueryVariables>) {
        return Apollo.useQuery<ContentListQuery, ContentListQueryVariables>(ContentListDocument, baseOptions);
      }
export function useContentListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ContentListQuery, ContentListQueryVariables>) {
          return Apollo.useLazyQuery<ContentListQuery, ContentListQueryVariables>(ContentListDocument, baseOptions);
        }
export type ContentListQueryHookResult = ReturnType<typeof useContentListQuery>;
export type ContentListLazyQueryHookResult = ReturnType<typeof useContentListLazyQuery>;
export type ContentListQueryResult = Apollo.QueryResult<ContentListQuery, ContentListQueryVariables>;
export const PublishContentDocument = gql`
    mutation PublishContent($id: ID!, $publishAt: DateTime!, $publishedAt: DateTime!, $updatedAt: DateTime!) {
  content {
    _all {
      publish(id: $id, publishAt: $publishAt, publishedAt: $publishedAt, updatedAt: $updatedAt) {
        id
        pending {
          publishAt
        }
        published {
          publishedAt
        }
      }
    }
  }
}
    `;
export type PublishContentMutationFn = Apollo.MutationFunction<PublishContentMutation, PublishContentMutationVariables>;

/**
 * __usePublishContentMutation__
 *
 * To run a mutation, you first call `usePublishContentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePublishContentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [publishContentMutation, { data, loading, error }] = usePublishContentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      publishAt: // value for 'publishAt'
 *      publishedAt: // value for 'publishedAt'
 *      updatedAt: // value for 'updatedAt'
 *   },
 * });
 */
export function usePublishContentMutation(baseOptions?: Apollo.MutationHookOptions<PublishContentMutation, PublishContentMutationVariables>) {
        return Apollo.useMutation<PublishContentMutation, PublishContentMutationVariables>(PublishContentDocument, baseOptions);
      }
export type PublishContentMutationHookResult = ReturnType<typeof usePublishContentMutation>;
export type PublishContentMutationResult = Apollo.MutationResult<PublishContentMutation>;
export type PublishContentMutationOptions = Apollo.BaseMutationOptions<PublishContentMutation, PublishContentMutationVariables>;
export const UnpublishContentDocument = gql`
    mutation UnpublishContent($id: ID!) {
  content {
    _all {
      unpublish(id: $id) {
        id
        pending {
          publishAt
        }
        published {
          publishedAt
        }
      }
    }
  }
}
    `;
export type UnpublishContentMutationFn = Apollo.MutationFunction<UnpublishContentMutation, UnpublishContentMutationVariables>;

/**
 * __useUnpublishContentMutation__
 *
 * To run a mutation, you first call `useUnpublishContentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnpublishContentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unpublishContentMutation, { data, loading, error }] = useUnpublishContentMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useUnpublishContentMutation(baseOptions?: Apollo.MutationHookOptions<UnpublishContentMutation, UnpublishContentMutationVariables>) {
        return Apollo.useMutation<UnpublishContentMutation, UnpublishContentMutationVariables>(UnpublishContentDocument, baseOptions);
      }
export type UnpublishContentMutationHookResult = ReturnType<typeof useUnpublishContentMutation>;
export type UnpublishContentMutationResult = Apollo.MutationResult<UnpublishContentMutation>;
export type UnpublishContentMutationOptions = Apollo.BaseMutationOptions<UnpublishContentMutation, UnpublishContentMutationVariables>;
export const DeleteContentDocument = gql`
    mutation DeleteContent($id: ID!) {
  content {
    _all {
      delete(id: $id)
    }
  }
}
    `;
export type DeleteContentMutationFn = Apollo.MutationFunction<DeleteContentMutation, DeleteContentMutationVariables>;

/**
 * __useDeleteContentMutation__
 *
 * To run a mutation, you first call `useDeleteContentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteContentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteContentMutation, { data, loading, error }] = useDeleteContentMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteContentMutation(baseOptions?: Apollo.MutationHookOptions<DeleteContentMutation, DeleteContentMutationVariables>) {
        return Apollo.useMutation<DeleteContentMutation, DeleteContentMutationVariables>(DeleteContentDocument, baseOptions);
      }
export type DeleteContentMutationHookResult = ReturnType<typeof useDeleteContentMutation>;
export type DeleteContentMutationResult = Apollo.MutationResult<DeleteContentMutation>;
export type DeleteContentMutationOptions = Apollo.BaseMutationOptions<DeleteContentMutation, DeleteContentMutationVariables>;
export const ModelADocument = gql`
    query ModelA($id: ID!) {
  content {
    modelA {
      read(id: $id) {
        id
        contentType
        title
        content {
          myString
          myRichText
        }
      }
    }
  }
}
    `;

/**
 * __useModelAQuery__
 *
 * To run a query within a React component, call `useModelAQuery` and pass it any options that fit your needs.
 * When your component renders, `useModelAQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useModelAQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useModelAQuery(baseOptions?: Apollo.QueryHookOptions<ModelAQuery, ModelAQueryVariables>) {
        return Apollo.useQuery<ModelAQuery, ModelAQueryVariables>(ModelADocument, baseOptions);
      }
export function useModelALazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ModelAQuery, ModelAQueryVariables>) {
          return Apollo.useLazyQuery<ModelAQuery, ModelAQueryVariables>(ModelADocument, baseOptions);
        }
export type ModelAQueryHookResult = ReturnType<typeof useModelAQuery>;
export type ModelALazyQueryHookResult = ReturnType<typeof useModelALazyQuery>;
export type ModelAQueryResult = Apollo.QueryResult<ModelAQuery, ModelAQueryVariables>;
export const ContentModelSchemaDocument = gql`
    query ContentModelSchema {
  content {
    _schema {
      id
      identifier
      nameSingular
      namePlural
      schema
    }
  }
}
    `;

/**
 * __useContentModelSchemaQuery__
 *
 * To run a query within a React component, call `useContentModelSchemaQuery` and pass it any options that fit your needs.
 * When your component renders, `useContentModelSchemaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useContentModelSchemaQuery({
 *   variables: {
 *   },
 * });
 */
export function useContentModelSchemaQuery(baseOptions?: Apollo.QueryHookOptions<ContentModelSchemaQuery, ContentModelSchemaQueryVariables>) {
        return Apollo.useQuery<ContentModelSchemaQuery, ContentModelSchemaQueryVariables>(ContentModelSchemaDocument, baseOptions);
      }
export function useContentModelSchemaLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ContentModelSchemaQuery, ContentModelSchemaQueryVariables>) {
          return Apollo.useLazyQuery<ContentModelSchemaQuery, ContentModelSchemaQueryVariables>(ContentModelSchemaDocument, baseOptions);
        }
export type ContentModelSchemaQueryHookResult = ReturnType<typeof useContentModelSchemaQuery>;
export type ContentModelSchemaLazyQueryHookResult = ReturnType<typeof useContentModelSchemaLazyQuery>;
export type ContentModelSchemaQueryResult = Apollo.QueryResult<ContentModelSchemaQuery, ContentModelSchemaQueryVariables>;
export const ImageListDocument = gql`
    query ImageList($filter: String, $after: ID, $before: ID, $first: Int, $last: Int) {
  images(filter: {title: $filter}, after: $after, before: $before, first: $first, last: $last) {
    nodes {
      ...ImageRef
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    ${ImageRefFragmentDoc}`;

/**
 * __useImageListQuery__
 *
 * To run a query within a React component, call `useImageListQuery` and pass it any options that fit your needs.
 * When your component renders, `useImageListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImageListQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *      first: // value for 'first'
 *      last: // value for 'last'
 *   },
 * });
 */
export function useImageListQuery(baseOptions?: Apollo.QueryHookOptions<ImageListQuery, ImageListQueryVariables>) {
        return Apollo.useQuery<ImageListQuery, ImageListQueryVariables>(ImageListDocument, baseOptions);
      }
export function useImageListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ImageListQuery, ImageListQueryVariables>) {
          return Apollo.useLazyQuery<ImageListQuery, ImageListQueryVariables>(ImageListDocument, baseOptions);
        }
export type ImageListQueryHookResult = ReturnType<typeof useImageListQuery>;
export type ImageListLazyQueryHookResult = ReturnType<typeof useImageListLazyQuery>;
export type ImageListQueryResult = Apollo.QueryResult<ImageListQuery, ImageListQueryVariables>;
export const ImageDocument = gql`
    query Image($id: ID!) {
  image(id: $id) {
    ...FullImage
  }
}
    ${FullImageFragmentDoc}`;

/**
 * __useImageQuery__
 *
 * To run a query within a React component, call `useImageQuery` and pass it any options that fit your needs.
 * When your component renders, `useImageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImageQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useImageQuery(baseOptions?: Apollo.QueryHookOptions<ImageQuery, ImageQueryVariables>) {
        return Apollo.useQuery<ImageQuery, ImageQueryVariables>(ImageDocument, baseOptions);
      }
export function useImageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ImageQuery, ImageQueryVariables>) {
          return Apollo.useLazyQuery<ImageQuery, ImageQueryVariables>(ImageDocument, baseOptions);
        }
export type ImageQueryHookResult = ReturnType<typeof useImageQuery>;
export type ImageLazyQueryHookResult = ReturnType<typeof useImageLazyQuery>;
export type ImageQueryResult = Apollo.QueryResult<ImageQuery, ImageQueryVariables>;
export const UploadImageDocument = gql`
    mutation UploadImage($input: UploadImageInput!) {
  uploadImage(input: $input) {
    ...ImageRef
  }
}
    ${ImageRefFragmentDoc}`;
export type UploadImageMutationFn = Apollo.MutationFunction<UploadImageMutation, UploadImageMutationVariables>;

/**
 * __useUploadImageMutation__
 *
 * To run a mutation, you first call `useUploadImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadImageMutation, { data, loading, error }] = useUploadImageMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUploadImageMutation(baseOptions?: Apollo.MutationHookOptions<UploadImageMutation, UploadImageMutationVariables>) {
        return Apollo.useMutation<UploadImageMutation, UploadImageMutationVariables>(UploadImageDocument, baseOptions);
      }
export type UploadImageMutationHookResult = ReturnType<typeof useUploadImageMutation>;
export type UploadImageMutationResult = Apollo.MutationResult<UploadImageMutation>;
export type UploadImageMutationOptions = Apollo.BaseMutationOptions<UploadImageMutation, UploadImageMutationVariables>;
export const UpdateImageDocument = gql`
    mutation UpdateImage($id: ID!, $input: UpdateImageInput!) {
  updateImage(id: $id, input: $input) {
    ...FullImage
  }
}
    ${FullImageFragmentDoc}`;
export type UpdateImageMutationFn = Apollo.MutationFunction<UpdateImageMutation, UpdateImageMutationVariables>;

/**
 * __useUpdateImageMutation__
 *
 * To run a mutation, you first call `useUpdateImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateImageMutation, { data, loading, error }] = useUpdateImageMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateImageMutation(baseOptions?: Apollo.MutationHookOptions<UpdateImageMutation, UpdateImageMutationVariables>) {
        return Apollo.useMutation<UpdateImageMutation, UpdateImageMutationVariables>(UpdateImageDocument, baseOptions);
      }
export type UpdateImageMutationHookResult = ReturnType<typeof useUpdateImageMutation>;
export type UpdateImageMutationResult = Apollo.MutationResult<UpdateImageMutation>;
export type UpdateImageMutationOptions = Apollo.BaseMutationOptions<UpdateImageMutation, UpdateImageMutationVariables>;
export const DeleteImageDocument = gql`
    mutation DeleteImage($id: ID!) {
  deleteImage(id: $id)
}
    `;
export type DeleteImageMutationFn = Apollo.MutationFunction<DeleteImageMutation, DeleteImageMutationVariables>;

/**
 * __useDeleteImageMutation__
 *
 * To run a mutation, you first call `useDeleteImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteImageMutation, { data, loading, error }] = useDeleteImageMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteImageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteImageMutation, DeleteImageMutationVariables>) {
        return Apollo.useMutation<DeleteImageMutation, DeleteImageMutationVariables>(DeleteImageDocument, baseOptions);
      }
export type DeleteImageMutationHookResult = ReturnType<typeof useDeleteImageMutation>;
export type DeleteImageMutationResult = Apollo.MutationResult<DeleteImageMutation>;
export type DeleteImageMutationOptions = Apollo.BaseMutationOptions<DeleteImageMutation, DeleteImageMutationVariables>;